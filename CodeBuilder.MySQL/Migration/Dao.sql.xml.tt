<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>

<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>

<#@ include file="$(ProjectDir)\Config\DbConnection.ttinclude" #>
<#@ include file="$(ProjectDir)\Config\TemplateComment.ttinclude" #>
<#@ include file="$(ProjectDir)\Entity\MySQLDbField.ttinclude" #>
<#@ include file="$(ProjectDir)\Entity\MySQLDbTable.ttinclude" #>
<#@ include file="$(ProjectDir)\Helper\MySQLDbHelper.ttinclude" #>
<#@ include file="$(ProjectDir)\Helper\MySQLCLRTypeHelper.ttinclude" #>
<#@ include file="$(ProjectDir)\Helper\StringHelper.ttinclude" #>
<#@ include file="AMigration.ttinclude" #>

<?xml version="1.0" encoding="utf-8" ?>
<statements>
<#   
    var entities = MySQLDbHelper.GetEntities(DbConnection.CONNECTION_STRING, AMigration.DB_NAME);
    foreach(MySQLDbTable entity in entities)
    {
		var name = StringHelper.ToBigHump(entity.Name);
        var comment = entity.Comment;
#>
    <statement id="New_<#=name#>_Insert" description="新增<#=name#>">
        INSERT INTO <#=name#> (
<#        
        var fields = entity.Fields;
        var length = fields.Count;
        for(int i = 0; i < length; i++)
        {        
            var fieldName = StringHelper.ToBigHump(fields[i].Name);
            var fieldType = fields[i].Type;
            var fieldComment = fields[i].Comment;
#>
        `<#=fieldName#>`<#= i == length - 1 ? ")" : "," #>                    
<#
        }  
#>
        VALUES(
<#        
        var tFields = entity.Fields;
        var tLength = tFields.Count;
        for(int i = 0; i < tLength; i++)
        {        
            var fieldName = StringHelper.ToBigHump(tFields[i].Name);
            var fieldType = tFields[i].Type;
            var fieldComment = tFields[i].Comment;
#>
        @<#=fieldName#><#= i == tLength - 1 ? ");" : "," #>                    
<#
        }  
#>
    </statement>
<#
    }
#>
</statements>
<#
    var path = @$"{Host.ResolveAssemblyReference("$(ProjectDir)")}{AMigration.OUTPUT_PATH}\Dao\Datas";
    if(!Directory.Exists(path))
    {
        Directory.CreateDirectory(path);
    }
    string fileName = string.Format(@"{0}\{1}.xml", path, "NewDataBase.sql");
    File.WriteAllText(fileName , this.GenerationEnvironment.ToString());
    this.GenerationEnvironment.Clear();
#>