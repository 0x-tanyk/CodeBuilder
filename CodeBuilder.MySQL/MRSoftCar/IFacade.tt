<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>

<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>

<#@ include file="$(ProjectDir)\Config\DbConnection.ttinclude" #>
<#@ include file="$(ProjectDir)\Config\TemplateComment.ttinclude" #>
<#@ include file="$(ProjectDir)\Entity\MySQLDbField.ttinclude" #>
<#@ include file="$(ProjectDir)\Entity\MySQLDbTable.ttinclude" #>
<#@ include file="$(ProjectDir)\Helper\MySQLDbHelper.ttinclude" #>
<#@ include file="$(ProjectDir)\Helper\MySQLCLRTypeHelper.ttinclude" #>
<#@ include file="$(ProjectDir)\Helper\StringHelper.ttinclude" #>
<#@ include file="AMRSoftCar.ttinclude" #>

<#   
    var entities = MySQLDbHelper.GetEntities(DbConnection.CONNECTION_STRING, AMRSoftCar.DB_NAME);
    foreach(MySQLDbTable entity in entities)
    {
		var name = StringHelper.ToBigHump(entity.Name);
        var comment = entity.Comment;
#>
//-----------------------------------------------------------------------
// <copyright file="<#=name#>.cs" company="<#=TemplateComment.FILE_COPYRIGHT#>">
// * Copyright (C) <#=TemplateComment.FILE_COPYRIGHT_YEAR#> <#=TemplateComment.FILE_COPYRIGHT#> All Rights Reserved
// * Version : <#=TemplateComment.SDK_VERSION#>
// * Author  : <#=TemplateComment.FILE_AUTHOR#>
// * FileName: <#=name#>.cs
// * DateTime: <#=TemplateComment.FILE_TIME#>
// </copyright>
//-----------------------------------------------------------------------
using System.Collections.Generic;
using System.Threading.Tasks;
using MRSOFT.Paging;
using MRSoftCar.Dto.Common;
using MRSoftCar.Dto.Consume;
using MRSoftCar.Dto.Import;
using MRSoftCar.Dto.Member;

namespace <#=AMRSoftCar.FILE_NAMESPACE#>.IFacade
{
    /// <summary>
    /// <#=comment#>外观
    /// </summary>
    public interface I<#= name#>Facade
    {
        /// <summary>
        /// 新增
        /// </summary>
        /// <param name="dto"><#=comment#>输入参数</param>
        /// <returns><#=comment#>Id</returns>
        Task<long> CreateAsync(<#=name#>InputDto dto);

        /// <summary>
        /// 删除
        /// </summary>
        /// <param name="ids"><#=comment#>Id集合</param>
        /// <returns>操作结果</returns>
        Task<int> DeleteAsync(IEnumerable<long> ids);

        /// <summary>
        /// 编辑
        /// </summary>
        /// <param name="dto"><#=comment#>输入参数</param>
        /// <returns>操作结果</returns>
        Task<int> ModifyAsync(<#=name#>InputDto dto);

        /// <summary>
        /// 获取列表（下拉框）
        /// </summary>
        /// <param name="shopId">店铺Id</param>
        /// <returns><#=comment#>下拉列表</returns>
        Task<IEnumerable<SelectItemDto>> GetDropdownListAsync(long shopId);

        /// <summary>
        /// 获取列表
        /// </summary>
        /// <param name="parameter">查询参数</param>
        /// <returns><#=comment#>列表</returns>
        Task<PagedDto<<#=name#>OutputDto>> GetListAsync(PageQueryDto parameter);

        /// <summary>
        ///  获取<#=comment#>
        /// </summary>
        /// <param name="id"><#=comment#>Id</param>
        /// <returns><#=comment#></returns>
        Task<<#=name#>OutputDto> Get<#=name#>infoAsync(long id);

        /// <summary>
        /// 检查<#=comment#>是否存在
        /// </summary>
        /// <param name="name"><#=comment #>名称</param>
        /// <param name="shopId">店铺Id</param>
        /// <param name="id">排除<#=comment #>Id</param>
        /// <returns>是否存在</returns>
        Task<bool> CheckIsExistAsync(string name, long shopId, long? id = null);

        /// <summary>
        /// 检查<#=comment#>Id是否存在
        /// </summary>
        /// <param name="id"><#=comment#>Id</param>
        /// <returns>是否存在</returns>
        Task<bool> CheckIsExistAsync(long id);

        /// <summary>
        /// 检查<#=comment#>Id集合是否存在
        /// </summary>
        /// <param name="ids"><#=comment#>Id集合</param>
        /// <returns>是否存在</returns>
        Task<bool> CheckIsExistAsync(IEnumerable<long> ids);
    }
}
<#
        var path = @$"{Host.ResolveAssemblyReference("$(ProjectDir)")}{AMRSoftCar.OUTPUT_PATH}\IFacade";
        if(!Directory.Exists(path))
        {
            Directory.CreateDirectory(path);
        }
        string fileName = string.Format(@"{0}\{1}.cs", path, $"I{name}Facade");
        File.WriteAllText(fileName , this.GenerationEnvironment.ToString());
        this.GenerationEnvironment.Clear();
    }
#>