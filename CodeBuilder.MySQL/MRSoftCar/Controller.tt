<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>

<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>

<#@ include file="$(ProjectDir)\Config\DbConnection.ttinclude" #>
<#@ include file="$(ProjectDir)\Config\TemplateComment.ttinclude" #>
<#@ include file="$(ProjectDir)\Entity\MySQLDbField.ttinclude" #>
<#@ include file="$(ProjectDir)\Entity\MySQLDbTable.ttinclude" #>
<#@ include file="$(ProjectDir)\Helper\MySQLDbHelper.ttinclude" #>
<#@ include file="$(ProjectDir)\Helper\MySQLCLRTypeHelper.ttinclude" #>
<#@ include file="$(ProjectDir)\Helper\StringHelper.ttinclude" #>
<#@ include file="AMRSoftCar.ttinclude" #>

<#   
    var entities = MySQLDbHelper.GetEntities(DbConnection.CONNECTION_STRING, AMRSoftCar.DB_NAME);
    foreach(MySQLDbTable entity in entities)
    {
		var name = StringHelper.ToBigHump(entity.Name);
        var comment = entity.Comment;
#>
//-----------------------------------------------------------------------
// <copyright file="<#=name#>.cs" company="<#=TemplateComment.FILE_COPYRIGHT#>">
// * Copyright (C) <#=TemplateComment.FILE_COPYRIGHT_YEAR#> <#=TemplateComment.FILE_COPYRIGHT#> All Rights Reserved
// * Version : <#=TemplateComment.SDK_VERSION#>
// * Author  : <#=TemplateComment.FILE_AUTHOR#>
// * FileName: <#=name#>.cs
// * DateTime: <#=TemplateComment.FILE_TIME#>
// </copyright>
//-----------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using MRSOFT;
using MRSOFT.Paging;
using MRSoftCar.Api.Base.Controllers;
using MRSoftCar.Dto.Common;
using MRSoftCar.Dto.Employee;
using MRSoftCar.IFacade;

namespace <#=AMRSoftCar.FILE_NAMESPACE#>.Api.Controllers
{
    /// <summary>
    /// <#=comment#>
    /// </summary>
    [Route("api/<#=name#>")]
    [ApiVersion("1.0")]
    [ApiController]
    public class <#=name#>Controller : BaseApiController
    {
        /// <summary>
        /// <#=comment#>外观
        /// </summary>
        Lazy<I<#=name#>Facade> <#=name.ToLower()#>Facade = LazyInit.GetLazy<I<#=name#>Facade>();

        /// <summary>
        /// 新增
        /// </summary>
        /// <param name="dto"><#=comment#>信息</param>
        /// <returns><#=comment#>Id</returns>
        [HttpPost, Route("Create")]
        public async Task<long> Create(<#=name#>InputDto dto)
        {
            var result = await <#=name.ToLower()#>Facade.Value.CreateAsync(dto);
            return result;
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <param name="ids"><#=comment#>Id集合</param>
        /// <returns>操作结果</returns>
        [HttpPost, Route("Delete")]
        public async Task Delete(IEnumerable<long> ids)
        {
            await <#=name.ToLower()#>Facade.Value.DeleteAsync(ids);
        }

        /// <summary>
        /// 编辑
        /// </summary>
        /// <param name="dto"><#=comment#>信息</param>
        /// <returns>操作结果</returns>
        [HttpPut, Route("Update")]
        public async Task Update(<#=name#>InputDto dto)
        {
            await <#=name.ToLower()#>Facade.Value.ModifyAsync(dto);
        }

        /// <summary>
        /// 获取下拉框列表
        /// </summary>
        /// <param name="shopId">店铺Id</param>
        /// <returns>下拉框列表</returns>
        [HttpGet, Route("DropdownList")]
        public async Task<IEnumerable<SelectItemDto>> GetDropdownList(long shopId)
        {
            var result = await <#=name.ToLower()#>Facade.Value.GetDropdownListAsync(shopId);
            return result;
        }

        /// <summary>
        /// 获取列表
        /// </summary>
        /// <param name="parameter">查询参数</param>
        /// <returns>列表</returns>
        [HttpPost, Route("List")]
        public async Task<PagedDto<<#=name#>OutputDto>> GetList(PageQueryDto parameter)
        {
            var result = await <#=name.ToLower()#>Facade.Value.GetListAsync(parameter);
            return result;
        }

        /// <summary>
        /// 获取<#=comment#>
        /// </summary>
        /// <param name="id"><#=comment#>Id</param>
        /// <returns><#=comment#>信息</returns>
        [HttpGet, Route("<#=name#>info")]
        public async Task<<#=name#>OutputDto> Get<#=name#>info(long id)
        {
            var result = await <#=name.ToLower()#>Facade.Value.Get<#=name#>infoAsync(id);
            return result;
        }
    }
}
<#
        var path = @$"{Host.ResolveAssemblyReference("$(ProjectDir)")}{AMRSoftCar.OUTPUT_PATH}\Controller";
        if(!Directory.Exists(path))
        {
            Directory.CreateDirectory(path);
        }
        string fileName = string.Format(@"{0}\{1}.cs", path, $"{name}Controller");
        File.WriteAllText(fileName , this.GenerationEnvironment.ToString());
        this.GenerationEnvironment.Clear();
    }
 #>